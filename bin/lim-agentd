#!/usr/bin/env perl

use common::sense;
use Getopt::Long ();
use Pod::Usage ();
use Log::Log4perl ();
$Log::Log4perl::JOIN_MSG_ARRAY_CHAR = '';
use POSIX;

use AnyEvent ();

use Lim ();
use Lim::RPC::Server ();
use Lim::RPC::TLS ();
use Lim::Agent ();
use Lim::Plugins ();

my $help = 0;
my $conf;
my $host = '0.0.0.0';
my $port = 5353;
my $log4perl;
my $html = '/usr/share/lim/html';
my $prefix;
my $foreground = 0;
my $pidfile = '/var/run/lim-agentd.pid';

Getopt::Long::GetOptions(
    'help|?' => \$help,
    'conf:s' => \$conf,
    'log4perl:s' => \$log4perl,
    'prefix:s' => \$prefix,
    'foreground' => \$foreground,
    'pidfile:s' => \$pidfile
) or Pod::Usage::pod2usage(2);
Pod::Usage::pod2usage(1) if $help;

if (defined $log4perl and -f $log4perl) {
    Log::Log4perl->init($log4perl);
}
elsif ($foreground) {
    Log::Log4perl->init( \q(
    log4perl.logger                   = DEBUG, Screen
    log4perl.appender.Screen          = Log::Log4perl::Appender::Screen
    log4perl.appender.Screen.stderr   = 0
    log4perl.appender.Screen.layout   = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Screen.layout.ConversionPattern = %d %F [%L] %p: %m%n
    ) );
}
else {
    Log::Log4perl->init( \q(
    log4perl.logger                    = DEBUG, SYSLOG
    log4perl.appender.SYSLOG           = Log::Dispatch::Syslog
    log4perl.appender.SYSLOG.min_level = debug
    log4perl.appender.SYSLOG.ident     = lim-agentd
    log4perl.appender.SYSLOG.facility  = daemon
    log4perl.appender.SYSLOG.layout    = Log::Log4perl::Layout::SimpleLayout
    ) );
}

if (defined $conf) {
    unless (-r $conf and Lim::LoadConfig($conf)) {
        print STDERR 'Unable to read configuration file: ', $conf, "\n";
        exit(1);
    }
    Lim::Config->{agent}->{config_file} = $conf;
}
else {
    Lim::LoadConfig('/etc/lim/agent.yaml');
}

Lim::LoadConfigDirectory('/etc/lim/agent.d');
Lim::UpdateConfig;

if (defined $prefix) {
    Lim::Config->{prefix} = [];
    
    foreach (split(/,/o, $prefix)) {
        s/\/+$//o;
        push(@{Lim::Config->{prefix}}, $_);
    }
}

unless ($foreground) {
    unless (POSIX::setsid) {
        print STDERR 'Unable to create a new process session (setsid): ', $!, "\n";
        exit(2);
    }

    my $pid = fork();
    if ($pid < 0) {
        print STDERR 'Unable to fork a new process: ', $!, "\n";
        exit(2);
    }
    elsif ($pid) {
        exit 0;
    }
    
    if ($pidfile) {
        unless(open(PIDFILE, '>', $pidfile,)) {
            print STDERR 'Unable to open pidfile "', $pidfile, '" for writing: ', $!, "\n";
            exit(2);
        }
        print PIDFILE POSIX::getpid, "\n";
        close(PIDFILE);
        
        unless(open(PIDFILE, $pidfile)) {
            print STDERR 'Unable to open pidfile "', $pidfile, '" for verifying pid: ', $!, "\n";
            exit(2);
        }
        my $pidinfile = <PIDFILE>;
        chomp($pidinfile);
        close(PIDFILE);
        
        unless (POSIX::getpid == $pidinfile) {
            print STDERR 'Unable to correctly write my pid to pidfile "', $pidfile, "\"\n";
            exit(2);
        }
    }
    
    chdir('/');
    umask(0);
    foreach (0 .. (POSIX::sysconf (&POSIX::_SC_OPEN_MAX) || 1024)) {
        POSIX::close($_);
    }

    open(STDIN, '<', '/dev/null');
    open(STDOUT, '>', '/dev/null');
    open(STDERR, '>', '/dev/null');
}

my $cv = AnyEvent->condvar;
my @watchers;

push(@watchers,
    AnyEvent->signal(signal => "HUP", cb => sub {
    }),
    AnyEvent->signal(signal => "PIPE", cb => sub {
    }),
    AnyEvent->signal(signal => "INT", cb => sub {
        $cv->send;
    }),
    AnyEvent->signal(signal => "QUIT", cb => sub {
        $cv->send;
    }),
    AnyEvent->signal(signal => "TERM", cb => sub {
        $cv->send;
    }),
);

$html =~ s/\/*$//o;

my $server = Lim::RPC::Server->new(
    uri => (@ARGV == 1 ? $ARGV[0] : \@ARGV)
);
$server->serve(qw(Lim::Agent));
$server->serve(Lim::Plugins->instance->LoadedModules);

if (defined $server) {
    push(@watchers, $server);
    $cv->recv;
}

@watchers = ();

unless ($foreground) {
    if ($pidfile) {
        unlink($pidfile);
    }
}

__END__

=head1 NAME

lim-agentd - Lim Agent Daemon

=head1 SYNOPSIS

lim-agentd [options] <uri>

=head1 OPTIONS

=over 8

=item B<--conf <file>>

Specify the configure file to use (default /etc/lim/agent.yaml).

=item B<--key <key>>

Specify the SSL/TLS key to use for HTTPS.

=item B<--log4perl <file>>

Specify a Log::Log4perl configure file (default output to stdout).

=item B<--foreground>

Do not fork into background, output logs to STDOUT if no Log::Log4perl
configuration file is used.

=item B<--pidfile <file>>

Use the given file as pidfile (default /var/run/lim-agentd.pid).

=item B<--help>

Print a brief help message and exits.

=back

=head1 DESCRIPTION

...

=cut

