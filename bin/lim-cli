#!/usr/bin/env perl

use common::sense;
use Getopt::Long ();
use Pod::Usage ();
use Log::Log4perl ();
use Log::Log4perl::Appender::Lim::CLI ();

use AnyEvent ();

use Lim ();
use Lim::CLI ();
use Lim::RPC::Client::TLS ();

my $help = 0;
my $conf;
my $host = 'localhost';
my $port = 5353;
my $key;
my $log4perl;

Getopt::Long::GetOptions(
    'help|?' => \$help,
    'conf:s' => \$conf,
    'host:s' => \$host,
    'port:i' => \$port,
    'key=s' => \$key,
    'log4perl:s' => \$log4perl
) or Pod::Usage::pod2usage(2);
Pod::Usage::pod2usage(1) if $help;

if (defined $conf) {
    unless (-r $conf and Lim::LoadConfig($conf)) {
        print STDERR 'Unable to read configuration file: ', $conf, "\n";
        exit(1);
    }
    Lim::Config->{cli}->{config_file} = $conf;
}
else {
    Lim::LoadConfig(Lim::Config->{cli}->{config_file});
}

if (defined $log4perl and -f $log4perl) {
    Log::Log4perl->init($log4perl);
}
else {
    Log::Log4perl->init( \q(
    log4perl.logger                   = DEBUG, Screen, LimCLI
    log4perl.appender.Screen          = Log::Log4perl::Appender::Screen
    log4perl.appender.Screen.stderr   = 1
    log4perl.appender.Screen.layout   = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Screen.layout.ConversionPattern = %d %F [%L] %p: %m%n
    
    log4perl.appender.LimCLI          = Log::Log4perl::Appender::Lim::CLI
    log4perl.appender.LimCLI.stderr   = 1
    log4perl.appender.LimCLI.layout   = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.LimCLI.layout.ConversionPattern = %d %F [%L] %p: %m%n
    ) );
}

if (defined $host) {
    Lim::Config->{host} = $host;
}

if (defined $port) {
    Lim::Config->{port} = $port;
}

my $cv = AnyEvent->condvar;
my @watchers;

push(@watchers,
# TODO Implement config files
#    AnyEvent->signal(signal => "HUP", cb => sub {
#        if (defined($server)) {
#            $server->reload;
#        }
#    }),
    AnyEvent->signal(signal => "INT", cb => sub {
        $cv->send;
    }),
    AnyEvent->signal(signal => "QUIT", cb => sub {
        $cv->send;
    }),
    AnyEvent->signal(signal => "TERM", cb => sub {
        $cv->send;
    }),
);

Lim::RPC::Client::TLS->set_instance(Lim::RPC::Client::TLS->new(
    key => $key
));

my $cli = Lim::CLI->new(
    on_quit => sub {
        $cv->send;
    });

if (defined $cli) {
    push(@watchers, $cli);
    $cv->recv;
}

@watchers = ();

__END__

=head1 NAME

lim-cli - Lim CLI Interface

=head1 SYNOPSIS

sample [options] [file ...]

Options:
 --help           brief help message
 --man            full documentation

=head1 OPTIONS

=over 8

=item B<--conf <file>>

Specify the configure file to use (default ~/.limrc).

=item B<--host <ip>>

Specify the host/IP to connect to (default localhost).

=item B<--port <port>>

Specify the port to listen on (default 5353).

=item B<--key <key>>

Specify the SSL/TLS key to use for HTTPS.

=item B<--log4perl <file>>

Specify a Log::Log4perl configure file (default output to cli or stderr).

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut

